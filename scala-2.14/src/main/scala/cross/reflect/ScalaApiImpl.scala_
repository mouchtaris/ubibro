package cross
package reflect

import
  common.StdImports._,
  scala.reflect.runtime.universe.{
    Type ⇒ sType,
    Symbol ⇒ sSymbol,
    SingleTypeApi ⇒ sSingleTypeApi,
    SingletonTypeApi ⇒ sSingletonTypeApi,
    TypeApi ⇒ sTypeApi,
    TypeTag ⇒ sTypeTag,
    typeOf ⇒ stypeOf
  }

trait ApiImpl extends Api {

  final type TypeTag[T] = sTypeTag[T]
  final type Type = sType
  final type Symbol = sSymbol

  def typeOf[T: TypeTag]: Type =
    stypeOf[T]

  trait TypeApiImpl extends Any with super.TypeApi {
    final def dealias: Type = self.dealias
    final def baseClasses: uList[Symbol] = self.baseClasses
    final def baseType(s: Symbol): Type = self.baseType(s)
    final def typeArgs: uList[Type] = self.typeArgs
    final def isSingleType: Boolean =
      self.isInstanceOf[
        sSingleTypeApi with
        sSingletonTypeApi with
        sTypeApi
      ]
  }

}
